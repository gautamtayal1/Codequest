// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String                 @id @default(uuid())
  email                String                 @unique
  name                 String?
  role                 Role                   @default(USER)
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  submissions          Submission[]
  contestParticipation ContestParticipation[]
}

model Problem {
  id          String           @id @default(cuid())
  title       String
  description String
  slug        String           @unique
  solved      Int              @default(0)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  submissions Submission[]
  defaultCode DefaultCode[]
  contest     ContestProblem[]
}

model Submission {
  id               String           @id @default(cuid())
  problemId        String
  userId           String
  langaugeId       Int
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  code             String
  fullCode         String
  problem          Problem          @relation(fields: [problemId], references: [id])
  status           SubmissionResult @default(PENDING)
  testCases        TestCase[]
  user             User             @relation(fields: [userId], references: [id])
  contest          Contest[]
  contestProblem   ContestProblem?  @relation(fields: [contestProblemId], references: [id])
  contestProblemId String?
}

model Language {
  id          Int           @id @default(autoincrement())
  name        String
  judge0Id    Int           @unique
  defaultCode DefaultCode[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model TestCase {
  id               String         @id @default(cuid())
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  status           TestCaseResult @default(PENDING)
  judge0TrackingId String         @unique
  submissionId     String
  submission       Submission     @relation(fields: [submissionId], references: [id])
}

model DefaultCode {
  id         String   @id @default(cuid())
  languageId Int
  problemId  String
  code       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  language   Language @relation(fields: [languageId], references: [id])
  problem    Problem  @relation(fields: [problemId], references: [id])

  @@unique([languageId, problemId])
}

model Contest {
  id              String                 @id @default(cuid())
  name            String
  description     String?
  startDate       DateTime
  endDate         DateTime
  duration        Int
  visibility      ContestVisibility      @default(PUBLIC)
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt
  submissions     Submission[]
  contestProblems ContestProblem[]
  participants    ContestParticipation[]
}

model ContestProblem {
  id           String       @id @default(cuid())
  points       String
  problem      Problem      @relation(fields: [problemId], references: [id])
  problemId    String
  contest      Contest      @relation(fields: [contestId], references: [id])
  contestId    String
  submissions  Submission[]
  displayOrder Int

  @@unique([contestId, problemId])
}

model ContestParticipation {
  id        String  @id @default(cuid())
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  contest   Contest @relation(fields: [contestId], references: [id])
  contestId String
  score     Int
  rank      Int

  @@unique([userId, contestId])
}

enum Role {
  USER
  ADMIN
}

enum SubmissionResult {
  AC
  REJECTED
  PENDING
}

enum TestCaseResult {
  AC
  FAIL
  TLE //TIME LIMIT EXCEEDED
  PENDING
  COMPILATION_ERROR
}

enum ContestVisibility {
  PUBLIC
  PRIVATE
  HIDDEN
}
